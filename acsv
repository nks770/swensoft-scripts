#!/bin/bash

RED='\e[1;31m'
GREEN='\e[1;32m'
WHITE='\e[0m'

IFS=$'\n'
HASH=md5sum
MODE=USAGE
OVERWRITE=ASK
ONEFILE=NO
UNIQUE=$$

SYML=naGh

for args in $@ ; do

if [ "$args" == "-u" ] || [ "$args" == "u" ] || [ "$args" == "-update" ] ; then
MODE=UPDATE
#fi
elif [ "$args" == "-v" ] || [ "$args" == "v" ] || [ "$args" == "-verify" ] ; then
MODE=VERIFY
#fi
elif [ "$args" == "-c" ] || [ "$args" == "c" ] || [ "$args" == "-compup" ] ; then
MODE=COMPUP
#fi
elif [ "$args" == "-h" ] || [ "$args" == "/?" ] || [ "$args" == "-help" ] ; then
MODE=USAGE
#fi
elif [ "$args" == "-symlinks" ] ; then
SYML=naGhL
#fi
elif [ "$args" == "-overwrite" ] ; then
OVERWRITE=YES
#fi
elif [ "$args" == "-l" ] ; then
ONEFILE=YES
#fi
elif [ "$args" == "-skip" ] ; then
OVERWRITE=NO
#fi
elif [ "$args" == "-quiet" ] ; then
OVERWRITE=NO
#fi
elif [ "$args" == "-md5" ] ; then
HASH=md5sum
#fi
elif [ "$args" == "-sha1" ] ; then
HASH=sha1sum
#fi
elif [ "$args" == "-sha256" ] ; then
HASH=sha256sum
#fi
elif [ "$args" == "-aich" ] ; then
HASH=--aich
#fi
elif [ "$args" == "-ed2k" ] ; then
HASH=--ed2k
#fi
elif [ "$args" == "-V" ] || [ "$args" == "-version" ] ; then
echo "Advanced Checksum Verifier v1.60"
echo "Last edited 25 June 2014"
echo "(c)2011-2014 Swensoft Corporation"
echo ""
exit 0
else
TARGET=$args
fi
done

if [ "$MODE" != "USAGE" ] ; then
# Does the specified target directory exist?
if [ -f $TARGET ] ; then
echo -e "${RED}ERROR: You must specify a directory.  The script cannot process individual files.${WHITE}"
exit 4
fi
if [ ! -d $TARGET ] ; then
echo -e "${RED}ERROR: Directory "'"'"$TARGET"'"'" was not found.${WHITE}"
exit 4
fi
fi

# Set up checksumfile extensions.
if [ "${HASH}" == "md5sum" ]; then
outa=md5
outb=sha256
outc=sha1
outd=aich
oute=ed2k
elif [ "${HASH}" == "sha256sum" ]; then
outa=sha256
outb=md5
outc=sha1
outd=aich
oute=ed2k
elif [ "${HASH}" == "sha1sum" ]; then
outa=sha1
outb=sha256
outc=md5
outd=aich
oute=ed2k
elif [ "${HASH}" == "--aich" ]; then
HASH2=rhash
outa=aich
outb=sha256
outc=sha1
outd=md5
oute=ed2k
elif [ "${HASH}" == "--ed2k" ]; then
HASH2=rhash
outa=ed2k
outb=aich
outc=sha1
outd=md5
oute=sha256
fi


# Figure out where the script is running from, so we can get absolute paths.
here=`pwd`'/'
cfile=${here}${outa}sum.lst
# Burn off the "/" at the end of the input, if it is there.
sdir=$(echo "$TARGET"|awk '{ a=length($0); if(substr( $0, a, 1) == "/") a=a-1; print substr( $0, 1, a);}')
# If the user gave an absolute path, then this correction isn't necessary.
if [ "$(echo ${TARGET}|awk '{ print substr( $0, 0, 1 ) ; }')" == "/" ] ; then
here=''
fi


# Create checksum files.
if [ "$MODE" == "UPDATE" ]; then

if [ "$OVERWRITE" == "YES" ]; then
echo -e "${RED}All existing checksums will be overwritten.${WHITE}"
fi

if [ "$ONEFILE" == "YES" ] && [ -e "${cfile}" ] ; then
   dummy=N
   if [ "$OVERWRITE" == "YES" ] ; then
      dummy=y
   else
      echo -n -e "${RED}Checksum file ${cfile} already exists!!! Overwrite? (y/n)=${WHITE}"
      read dummy
   fi
   if [ "$dummy" == "y" ]; then
      rm -f "${cfile}"
      if [ -e "${cfile}" ] ; then
         echo -e "${RED}Could not delete ${cfile}!${WHITE}"
         exit 4
      fi
      touch "${cfile}"
   else
         echo -e "${RED}Please move or delete ${cfile} then try again.${WHITE}"
         exit 4
   fi
fi

for dd in $(find "$sdir" -type d | sort )
do
   out=$(echo "$dd"|awk -F/ '{ print $NF }')
   outbb=$out.$outb
   outcc=$out.$outc
   outdd=$out.$outd
   outee=$out.$oute
   out=$out.$outa
   cd "${here}${dd}"
   if [ "$(ls -${SYML}|grep ^-|wc -l)" != "0" ]; then
      echo Directory ${here}${dd} updating...
      dummy=y
      # Prompt the user to overwrite the .md5 file if it already exists.
      if [ "$ONEFILE" == "NO" ] && [ -e "$out" ] ; then
         if [ "$OVERWRITE" == "ASK" ]; then
            echo -n -e "${RED}Checksum file $out already exists!!! Overwrite? (y/n)=${WHITE}"
            read dummy
         elif [ "$OVERWRITE" == "YES" ]; then
            dummy=y
         else
            dummy=N
         fi
      fi
      # Following the user's advice, delete the .md5 file if it already exists:
      if [ "$dummy" == "y" ]; then
         if [ "$ONEFILE" == "NO" ] && [ -e "$out" ]; then
            rm -f "$out"
         fi
      # Make the checksum file:
         for f in $(ls -${SYML}|grep ^-|awk '{ a = index($0,$5) ; b = substr($0,a,length($0)-a+1) ; c = index(b,$7) ; d = substr(b,c,length(b)-c+1) ; e = index(d," ") ; f = substr(d,e+1,length(d)-e) ; print f ; }')
         do
            if [ "$f" != "$out" ] && [ "$f" != "$outbb" ] && [ "$f" != "$outcc" ] && [ "$f" != "$outdd" ] && [ "$f" != "$outee" ] ; then
               if [ "$ONEFILE" == "NO" ] ; then
                  echo -ne "${RED}"
                  ${HASH2} ${HASH} -- "${f}">>"$out"
                  echo -ne "${WHITE}"
               else
                  cd "${here}"
                  echo -ne "${RED}"
                  ${HASH2} ${HASH} -- "${dd}/${f}">>"${cfile}"
                  echo -ne "${WHITE}"
               fi
            fi
         done
      else
         echo -e "${GREEN}Checksum file ${out} already exists... skipping.${WHITE}"
      fi
   else
      echo -e "${GREEN}Directory ${here}${dd} is empty.${WHITE}"
   fi
done



# Checksum file verification.
elif [ "$MODE" == "VERIFY" ] || [ "$MODE" == "COMPUP" ] ; then

if [ "$MODE" == "COMPUP" ] && [ "$ONEFILE" == "YES" ] ; then
   echo -e "${RED}WARNING: ONEFILE mode is not supported in COMPUP mode.  Switched off.${WHITE}"
   ONEFILE=NO
fi

if [ "$ONEFILE" == "YES" ] && [ -e "${cfile}.tmp" ] ; then
   dummy=N
   if [ "$OVERWRITE" == "YES" ] ; then
      dummy=y
   else
      echo -n -e "${RED}Checksum file ${cfile}.tmp already exists!!! Overwrite? (y/n)=${WHITE}"
      read dummy
   fi
   if [ "$dummy" == "y" ]; then
      rm -f "${cfile}.tmp"
      if [ -e "${cfile}.tmp" ] ; then
         echo -e "${RED}Could not delete ${cfile}.tmp!${WHITE}"
         exit 4
      fi
      touch "${cfile}.tmp"
   else
         echo -e "${RED}Please move or delete ${cfile}.tmp then try again.${WHITE}"
         exit 4
   fi
fi


# Loop through all the subdirectories.
for dd in $(find "$sdir" -type d | sort )
do
# Find the name of the .md5 file for the current subdirectory.
   out=$(echo "$dd"|awk -F/ '{ print $NF }')
   outbb=$out.$outb
   outcc=$out.$outc
   outdd=$out.$outd
   outee=$out.$oute
   out=$out.$outa
   cd "${here}${dd}"                               # Go to the current directory.
   if [ "$(ls -${SYML}|grep ^-|wc -l)" != "0" ]; then # Only continue if there are files here.
      if [ "$MODE" == "COMPUP" ] || [ "$ONEFILE" == "YES" ] || [ -e "$out" ]; then  # Continue if a checksum file exists or if in ONEFILE or COMPUP modes.
         if [ -e "$out" ] ; then
            echo Directory ${here}${dd} verifying...
         else
            echo Directory ${here}${dd} updating...
         fi
         if [ "$ONEFILE" == "NO" ] && [ -e ~/.${outa}.${UNIQUE}.tmp ]; then
            rm -f ~/.${outa}.${UNIQUE}.tmp
         fi
         touch ~/.$outa.${UNIQUE}.tmp
         for f in $(ls -${SYML}|grep ^-|awk '{ a = index($0,$5) ; b = substr($0,a,length($0)-a+1) ; c = index(b,$7) ; d = substr(b,c,length(b)-c+1) ; e = index(d," ") ; f = substr(d,e+1,length(d)-e) ; print f ; }')
         do
            if [ "$f" != "$out" ] && [ "$f" != "$outbb" ] && [ "$f" != "$outcc" ] && [ "$f" != "$outdd" ] && [ "$f" != "$outee" ] ; then
               if [ "$ONEFILE" == "NO" ] ; then
                  echo -ne "${RED}"
                  ${HASH2} ${HASH} -- "${f}">>~/.${outa}.${UNIQUE}.tmp
                  echo -ne "${WHITE}"
               else # if ONEFILE="YES"
                  cd "${here}"
                  echo -ne "${RED}"
                  ${HASH2} ${HASH} -- "${dd}/${f}">>"${cfile}.tmp"
                  echo -ne "${WHITE}"
               fi
            fi
         done
         if [ "$ONEFILE" == "NO" ] ; then
            if [ -f ~/.${outa}.${UNIQUE}.tmp ] && [ -f "$out" ] ; then
               g=$(diff -u "$out" ~/.${outa}.${UNIQUE}.tmp)
            fi
            if [ ! -e "$out" ]; then
               mv -f ~/.${outa}.${UNIQUE}.tmp "$out"
            elif [ "$g" != "" ]; then
               echo -e "${RED}$g${WHITE}"
               if [ "$MODE" == "COMPUP" ] ; then
                  dummy=N
                  echo -e -n "${RED}Update this checksum file? (y/n)=${WHITE}"
                  read dummy
                  if [ "$dummy" == "y" ] ; then
                     mv -vf ~/.${outa}.${UNIQUE}.tmp "$out"
                  fi 
               fi
            fi
         fi
      else
         echo -e "${RED}Directory ${here}${dd} has no checksum file!${WHITE}"
      fi
   else
      echo -e "${GREEN}Directory ${here}${dd} is empty.${WHITE}"
   fi
done
if [ "$ONEFILE" == "YES" ] ; then
   g=$(diff -u "${cfile}" "${cfile}.tmp")
   if [ "$g" != "" ]; then
      echo -e "${RED}$g${WHITE}"
   fi
fi

if [ -e ~/.${outa}.${UNIQUE}.tmp ]; then
   rm -f ~/.${outa}.${UNIQUE}.tmp
fi
if [ -e "${cfile}.tmp" ]; then
   rm -f "${cfile}.tmp"
fi

elif [ "$MODE" == "USAGE" ] ; then
echo "Swensoft ACSV Checksum Verifier v1.60"
echo "(c)2011-2014 Swensoft Corporation"
echo
echo "Usage: acsv -(u|v) [-l] [-overwrite] [-skip] [-quiet] [-symlinks] -(md5|sha1|sha256) [directory] [-V] [-h]"
echo
echo "    u || -u || -update   Update checksum files in directory."
echo "    v || -v || -verify   Verify checksum files in directory."
echo "    c || -c || -compup   Verify checksums, update those that are different."
echo "    -l                   Write one checksum file in the current directory ONLY."
echo "    -overwrite           In update mode, existing checksums will be overwritten"
echo "                             without prompting."
echo "    -skip || -quiet      In update mode, directories with existing checksums will"
echo "                             be skipped without prompting."
echo "    -symlinks            Dereference symlinks, and include them in the checksums."
echo "    -md5                 Specifies that the software will use the md5 hash algorithm."
echo "    -sha1                Specifies that the software will use the sha1 hash algorithm."
echo "    -sha256              Specifies that the software will use the sha256 hash algorithm."
echo "    -V || -version       Prints version information then exits."
echo "    -h || -help          Displays this help message."
echo
exit

else
echo -e "${RED}Nothing to do.${WHITE}"
exit 1
fi
